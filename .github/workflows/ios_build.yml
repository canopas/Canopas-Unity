name: IOS build

#on: workflow_dispatch
on: push

jobs:
  ios_build_ipa:
    runs-on: macos-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 17.0.6
          cache: 'gradle'


      - uses: subosito/flutter-action@v2
        name: Set up Flutter SDK
        with:
          flutter-version: 3.7.7
          channel: 'stable'
          cache: true

      - name: Retrieve the secret and decode it to a file
        env:
          DESKTOP_CREDENTIALS_BASE64: ${{ secrets.DESKTOP_CREDENTIALS_BASE64 }}
          FIREBASE_OPTIONS_BASE64: ${{ secrets.FIREBASE_OPTIONS_BASE64 }}
          GOOGLE_SERVICES_PLIST_IOS_BASE64: ${{ secrets.GOOGLE_SERVICES_PLIST_IOS_BASE64 }}

        run: |
          echo $DESKTOP_CREDENTIALS_BASE64 | base64 --decode > lib/desktop_credentials.dart
          echo $FIREBASE_OPTIONS_BASE64 | base64 --decode > lib/firebase_options.dart
          echo $GOOGLE_SERVICES_PLIST_IOS_BASE64 | base64 --decode > ios/Runner/GoogleService-Info.

      - name: Install distribution certificates
        env:
          $APPLE_DISTRIBUTION_CERT_N_KEY: ${{ secrets.APPLE_DISTRIBUTION_CERT_N_KEY }}
          $BUILD_KEY_CHAIN_PASS: ${{ secrets.BUILD_KEY_CHAIN_PASS }}
          $BUILD_KEY_CHAIN: ${{ secrets.BUILD_KEY_CHAIN }}
          $APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          $DIST_PROVISION_UUID: ${{ secrets.DIST_PROVISION_UUID }}
          $DIST_PROVISION: ${{ secrets.DIST_PROVISION }}

        run: |
          cd ios
          chmod +x install_dist_certs.sh && ./install_dist_certs.sh
          chmod +x install_dist_profile.sh && ./install_dist_profile.sh
          flutter pub get
          arch -x86_64 pod install --repo-update
          cd ..

      - name: Archive and build iOS project
        env:
          $IOS_EXPORT_OPTIONS_PLIST: ${{ secrets.IOS_EXPORT_OPTIONS_PLIST }}
        run: |
          file='VERSION'
          fileData=`cat $file`
          IFS='.'
          read -a versionValue <<< "$fileData"
          buildNumber=$(expr `expr ${versionValue[0]} \* 1000000` + `expr ${versionValue[1]} \* 10000` + ${CI_PIPELINE_IID})
          IFS=''
          buildName="${versionValue[0]}.${versionValue[1]}.$CI_PIPELINE_IID"
          echo "Uploading build $buildName"
          echo $IOS_EXPORT_OPTIONS_PLIST | base64 --decode > ios/Runner/ExportOptions.plist
          flutter build ios --release
          xcodebuild -workspace $PWD/ios/Runner.xcworkspace \
          -scheme Runner clean archive \
          -sdk iphoneos -archivePath \
          $PWD/build/ios/iphoneos/Runner.xcarchive | xcpretty --color
          xcodebuild -exportArchive \ 
          -archivePath $PWD/build/ios/iphoneos/Runner.xcarchive \ 
          -exportOptionsPlist $PWD/ios/exportOptions.plist \ 
          -exportPath $PWD/build/ios/iphoneos/Runner.ipa

          echo 'archive done"

      #          ARCHIVE_PATH="$Home/Library/Developer/Xcode/Archives/ProjectUnity/${{ github.sha }}/${{ github.run_id  }}.xcarchive"
      #          xcodebuild -workspace ios/Runner.xcworkspace -scheme "Runner" clean archive -sdk iphoneos -archivePath $ARCHIVE_PATH | xcpretty --color

      - name: Cleanup
        run: |
          ARCHIVE_PATH="$Home/Library/Developer/Xcode/Archives/ProjectUnity/${{ github.sha }}/${{ github.run_id  }}.xcarchive"
          rm -rf $ARCHIVE_PATH



