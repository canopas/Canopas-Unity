name: Android build

on:
  push:
#    branches:
#      - master

#on: workflow_dispatch



jobs:
  android_build_apk:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 17.0.6
          cache: 'gradle'


      - uses: subosito/flutter-action@v2
        name: Set up Flutter SDK
        with:
          flutter-version: 3.7.7
          channel: 'stable'
          cache: true

      - name: Retrieve the secret and decode it to a file
        env:
          DESKTOP_CREDENTIALS_BASE64: ${{ secrets.DESKTOP_CREDENTIALS_BASE64 }}
          FIREBASE_OPTIONS_BASE64: ${{ secrets.FIREBASE_OPTIONS_BASE64 }}
          GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}

        run: |
          echo $DESKTOP_CREDENTIALS_BASE64 | base64 -di > lib/desktop_credentials.dart
          echo $FIREBASE_OPTIONS_BASE64 | base64 -di > lib/firebase_options.dart
          echo $GOOGLE_SERVICES_JSON_BASE64 | base64 -di > android/app/google-services.json

      - name: Create version number
        run: |
          file='VERSION'
          fileData=`cat $file`
          IFS='.'
          read -a versionValue <<< "$fileData"
          buildNumber=$(( ${versionValue[0]} * 1000000 + ${versionValue[1]} * 10000 + ${{ github.run_number }} ))
          IFS=''
          buildName="${versionValue[0]}.${versionValue[1]}.${{ github.run_number }}"
          echo "Generating android build $buildName $buildNumber"
          flutter build apk --release --build-number=$buildNumber --build-name=$buildName
          mv build/app/outputs/apk/release/ProjectUnity*.apk .

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ProjectUnity APK
          path: ProjectUnity*.apk


  android_build_aab:
    runs-on: ubuntu-latest
    needs: android_build_apk
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 17.0.6
          cache: 'gradle'


      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.7.7
          channel: 'stable'
          cache: true

      - name: Retrieve the secret and decode it to a file
        env:
          DESKTOP_CREDENTIALS_BASE64: ${{ secrets.DESKTOP_CREDENTIALS_BASE64 }}
          FIREBASE_OPTIONS_BASE64: ${{ secrets.FIREBASE_OPTIONS_BASE64 }}
          GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}

        run: |
          echo $DESKTOP_CREDENTIALS_BASE64 | base64 -di > lib/desktop_credentials.dart
          echo $FIREBASE_OPTIONS_BASE64 | base64 -di > lib/firebase_options.dart
          echo $GOOGLE_SERVICES_JSON_BASE64 | base64 -di > android/app/google-services.json

      - name: Create version number
        run: |
          file='VERSION'
          fileData=`cat $file`
          IFS='.'
          read -a versionValue <<< "$fileData"
          buildNumber=$(( ${versionValue[0]} * 1000000 + ${versionValue[1]} * 10000 + ${{ github.run_number }} ))
          IFS=''
          buildName="${versionValue[0]}.${versionValue[1]}.${{ github.run_number }}"
          echo "Generating android build $buildName $buildNumber"
          flutter build appbundle --build-number=$buildNumber --build-name=$buildName
          mv build/app/outputs/bundle/release/app-release.aab .

      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ProjectUnity AAB
          path: app-release.aab


  deploy_internal_android:
    runs-on: ubuntu-latest
    needs: android_build_aab

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 17.0.6
          cache: 'gradle'


      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.7.7
          channel: 'stable'
          cache: true

      - name: Retrieve the secret and decode it to a file
        env:
          DESKTOP_CREDENTIALS_BASE64: ${{ secrets.DESKTOP_CREDENTIALS_BASE64 }}
          FIREBASE_OPTIONS_BASE64: ${{ secrets.FIREBASE_OPTIONS_BASE64 }}
          GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}

        run: |
          echo $DESKTOP_CREDENTIALS_BASE64 | base64 -di > lib/desktop_credentials.dart
          echo $FIREBASE_OPTIONS_BASE64 | base64 -di > lib/firebase_options.dart
          echo $GOOGLE_SERVICES_JSON_BASE64 | base64 -di > android/app/google-services.json

      - name: Create version number
        run: |
               file='VERSION'
               fileData=`cat $file`
               IFS='.'
               read -a versionValue <<< "$fileData"
               buildNumber=$(( ${versionValue[0]} * 1000000 + ${versionValue[1]} * 10000 + ${{ github.run_number }} ))
               IFS=''
               buildName="${versionValue[0]}.${versionValue[1]}.${{ github.run_number }}"
               echo "Generating android build $buildName $buildNumber"
          #                    cd $HOME
          #                    sudo apt-get update
          #                    sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt1-dev libcurl4-openssl-dev libffi-dev
          #
          #                    git clone https://github.com/rbenv/rbenv.git ~/.rbenv
          #                    echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
          #                    echo 'eval "$(rbenv init -)"' >> ~/.bashrc
          #                    exec $SHELL
          #
          #                    git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
          #                    echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
          #                    exec $SHELL
          #
          #                    rbenv install 2.3.1
          #                    rbenv global 2.3.1
          #                    ruby -v
          #                    gem install bundler
          #                    rbenv rehash
               cd android
               sudo apt-get -qq update
               sudo apt-get install -qqy --no-install-recommends build-essential ruby-full
               gem install bundler fastlane
               echo $APKSIGN_KEYSTORE_BASE64 | base64 -di > release.jks
               export APKSIGN_KEYSTORE=`pwd`/release.jks
               echo $APP_PLAY_SERVICE_JSON > ~/google_play_api_key.json
               bundle exec fastlane supply init --track internal
               bundle exec fastlane upload_internal versionName:$buildName versionCode:$buildNumber

