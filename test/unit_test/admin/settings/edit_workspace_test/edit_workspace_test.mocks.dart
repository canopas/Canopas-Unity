// Mocks generated by Mockito 5.3.2 from annotations
// in projectunity/test/unit_test/admin/settings/edit_workspace_test/edit_workspace_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:projectunity/data/model/space/space.dart' as _i4;
import 'package:projectunity/data/services/space_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SpaceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpaceService extends _i1.Mock implements _i2.SpaceService {
  MockSpaceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createSpace({
    required String? name,
    required String? domain,
    required int? timeOff,
    required String? ownerId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSpace,
          [],
          {
            #name: name,
            #domain: domain,
            #timeOff: timeOff,
            #ownerId: ownerId,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteSpace(String? workspaceId) => (super.noSuchMethod(
        Invocation.method(
          #deleteSpace,
          [workspaceId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.Space>> getSpacesOfUser(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpacesOfUser,
          [uid],
        ),
        returnValue: _i3.Future<List<_i4.Space>>.value(<_i4.Space>[]),
      ) as _i3.Future<List<_i4.Space>>);
  @override
  _i3.Future<List<_i4.Space>> getSpaceJoinRequest(List<String>? requestsId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpaceJoinRequest,
          [requestsId],
        ),
        returnValue: _i3.Future<List<_i4.Space>>.value(<_i4.Space>[]),
      ) as _i3.Future<List<_i4.Space>>);
}
