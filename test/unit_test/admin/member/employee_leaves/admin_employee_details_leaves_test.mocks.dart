// Mocks generated by Mockito 5.4.0 from annotations
// in projectunity/test/unit_test/admin/member/employee_leaves/admin_employee_details_leaves_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:projectunity/data/model/leave/leave.dart' as _i5;
import 'package:projectunity/data/model/Pagination/pagination.dart' as _i2;
import 'package:projectunity/data/Repo/leave_repo.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLeavesPaginationData_0 extends _i1.SmartFake
    implements _i2.LeavesPaginationData {
  _FakeLeavesPaginationData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LeaveRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockLeaveRepo extends _i1.Mock implements _i3.LeaveRepo {
  MockLeaveRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.Leave>> get pendingLeaves => (super.noSuchMethod(
        Invocation.getter(#pendingLeaves),
        returnValue: _i4.Stream<List<_i5.Leave>>.empty(),
      ) as _i4.Stream<List<_i5.Leave>>);
  @override
  _i4.Future<_i2.LeavesPaginationData> leaves({
    _i6.DocumentSnapshot<_i5.Leave>? lastDoc,
    String? uid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #leaves,
          [],
          {
            #lastDoc: lastDoc,
            #uid: uid,
          },
        ),
        returnValue: _i4.Future<_i2.LeavesPaginationData>.value(
            _FakeLeavesPaginationData_0(
          this,
          Invocation.method(
            #leaves,
            [],
            {
              #lastDoc: lastDoc,
              #uid: uid,
            },
          ),
        )),
      ) as _i4.Future<_i2.LeavesPaginationData>);
  @override
  _i4.Stream<List<_i5.Leave>> userLeaveRequest(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #userLeaveRequest,
          [uid],
        ),
        returnValue: _i4.Stream<List<_i5.Leave>>.empty(),
      ) as _i4.Stream<List<_i5.Leave>>);
  @override
  _i4.Stream<List<_i5.Leave>> userLeavesByYear(
    String? uid,
    int? year,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #userLeavesByYear,
          [
            uid,
            year,
          ],
        ),
        returnValue: _i4.Stream<List<_i5.Leave>>.empty(),
      ) as _i4.Stream<List<_i5.Leave>>);
  @override
  _i4.Stream<List<_i5.Leave>> leaveByMonth(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #leaveByMonth,
          [date],
        ),
        returnValue: _i4.Stream<List<_i5.Leave>>.empty(),
      ) as _i4.Stream<List<_i5.Leave>>);
}
