// Mocks generated by Mockito 5.4.4 from annotations
// in projectunity/test/unit_test/admin/forms/create_forms_test/create_forms_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i17;

import 'package:firebase_storage/firebase_storage.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i20;
import 'package:image_picker/image_picker.dart' as _i12;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:projectunity/data/model/account/account.dart' as _i15;
import 'package:projectunity/data/model/employee/employee.dart' as _i4;
import 'package:projectunity/data/model/org_forms/org_form_info/org_form_info.dart'
    as _i10;
import 'package:projectunity/data/model/org_forms/org_form_response/org_form_response.dart'
    as _i11;
import 'package:projectunity/data/model/org_forms/org_forms.dart' as _i9;
import 'package:projectunity/data/model/space/space.dart' as _i16;
import 'package:projectunity/data/provider/user_state.dart' as _i14;
import 'package:projectunity/data/repo/form_repo.dart' as _i6;
import 'package:projectunity/data/services/storage_service.dart' as _i13;
import 'package:projectunity/ui/admin/forms/create_form/bloc/create_form_bloc.dart'
    as _i18;
import 'package:projectunity/ui/admin/forms/create_form/bloc/create_form_event.dart'
    as _i19;
import 'package:projectunity/ui/admin/forms/create_form/bloc/create_form_state.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLostDataResponse_0 extends _i1.SmartFake
    implements _i2.LostDataResponse {
  _FakeLostDataResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseStorage_1 extends _i1.SmartFake
    implements _i3.FirebaseStorage {
  _FakeFirebaseStorage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEmployee_2 extends _i1.SmartFake implements _i4.Employee {
  _FakeEmployee_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateFormState_3 extends _i1.SmartFake
    implements _i5.CreateFormState {
  _FakeCreateFormState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FormRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormRepo extends _i1.Mock implements _i6.FormRepo {
  MockFormRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String generateNewFormId() => (super.noSuchMethod(
        Invocation.method(
          #generateNewFormId,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #generateNewFormId,
            [],
          ),
        ),
      ) as String);

  @override
  String generateNewFormFieldId({required String? formId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateNewFormFieldId,
          [],
          {#formId: formId},
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #generateNewFormFieldId,
            [],
            {#formId: formId},
          ),
        ),
      ) as String);

  @override
  _i8.Future<void> createForm({required _i9.OrgForm? orgForm}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createForm,
          [],
          {#orgForm: orgForm},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i10.OrgFormInfo>> getForms() => (super.noSuchMethod(
        Invocation.method(
          #getForms,
          [],
        ),
        returnValue:
            _i8.Future<List<_i10.OrgFormInfo>>.value(<_i10.OrgFormInfo>[]),
      ) as _i8.Future<List<_i10.OrgFormInfo>>);

  @override
  _i8.Future<_i10.OrgFormInfo?> getFormInfo({required String? formId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFormInfo,
          [],
          {#formId: formId},
        ),
        returnValue: _i8.Future<_i10.OrgFormInfo?>.value(),
      ) as _i8.Future<_i10.OrgFormInfo?>);

  @override
  _i8.Future<_i9.OrgForm?> getForm({required String? formId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForm,
          [],
          {#formId: formId},
        ),
        returnValue: _i8.Future<_i9.OrgForm?>.value(),
      ) as _i8.Future<_i9.OrgForm?>);

  @override
  _i8.Future<List<_i11.OrgFormResponse>> getFormResponse(
          {required String? formId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFormResponse,
          [],
          {#formId: formId},
        ),
        returnValue: _i8.Future<List<_i11.OrgFormResponse>>.value(
            <_i11.OrgFormResponse>[]),
      ) as _i8.Future<List<_i11.OrgFormResponse>>);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i12.ImagePicker {
  MockImagePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.XFile?> pickImage({
    required _i2.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i2.CameraDevice? preferredCameraDevice = _i2.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<_i2.XFile?>.value(),
      ) as _i8.Future<_i2.XFile?>);

  @override
  _i8.Future<List<_i2.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<List<_i2.XFile>>.value(<_i2.XFile>[]),
      ) as _i8.Future<List<_i2.XFile>>);

  @override
  _i8.Future<_i2.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<_i2.XFile?>.value(),
      ) as _i8.Future<_i2.XFile?>);

  @override
  _i8.Future<List<_i2.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultipleMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<List<_i2.XFile>>.value(<_i2.XFile>[]),
      ) as _i8.Future<List<_i2.XFile>>);

  @override
  _i8.Future<_i2.XFile?> pickVideo({
    required _i2.ImageSource? source,
    _i2.CameraDevice? preferredCameraDevice = _i2.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i8.Future<_i2.XFile?>.value(),
      ) as _i8.Future<_i2.XFile?>);

  @override
  _i8.Future<_i2.LostDataResponse> retrieveLostData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveLostData,
          [],
        ),
        returnValue:
            _i8.Future<_i2.LostDataResponse>.value(_FakeLostDataResponse_0(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
      ) as _i8.Future<_i2.LostDataResponse>);

  @override
  bool supportsImageSource(_i2.ImageSource? source) => (super.noSuchMethod(
        Invocation.method(
          #supportsImageSource,
          [source],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i13.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseStorage get firebaseStorage => (super.noSuchMethod(
        Invocation.getter(#firebaseStorage),
        returnValue: _FakeFirebaseStorage_1(
          this,
          Invocation.getter(#firebaseStorage),
        ),
      ) as _i3.FirebaseStorage);

  @override
  _i8.Future<String> uploadProfilePic({
    required String? path,
    required String? imagePath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadProfilePic,
          [],
          {
            #path: path,
            #imagePath: imagePath,
          },
        ),
        returnValue: _i8.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #uploadProfilePic,
            [],
            {
              #path: path,
              #imagePath: imagePath,
            },
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> deleteProfileImage(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteProfileImage,
          [path],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteStorageFolder(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteStorageFolder,
          [path],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [UserStateNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserStateNotifier extends _i1.Mock implements _i14.UserStateNotifier {
  MockUserStateNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.UserState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i14.UserState.authenticated,
      ) as _i14.UserState);

  @override
  String get employeeId => (super.noSuchMethod(
        Invocation.getter(#employeeId),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#employeeId),
        ),
      ) as String);

  @override
  _i4.Employee get employee => (super.noSuchMethod(
        Invocation.getter(#employee),
        returnValue: _FakeEmployee_2(
          this,
          Invocation.getter(#employee),
        ),
      ) as _i4.Employee);

  @override
  bool get isAdmin => (super.noSuchMethod(
        Invocation.getter(#isAdmin),
        returnValue: false,
      ) as bool);

  @override
  bool get isEmployee => (super.noSuchMethod(
        Invocation.getter(#isEmployee),
        returnValue: false,
      ) as bool);

  @override
  bool get isHR => (super.noSuchMethod(
        Invocation.getter(#isHR),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void getUserStatus() => super.noSuchMethod(
        Invocation.method(
          #getUserStatus,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> setUser(_i15.Account? user) => (super.noSuchMethod(
        Invocation.method(
          #setUser,
          [user],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setEmployeeWithSpace({
    required _i16.Space? space,
    required _i4.Employee? spaceUser,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setEmployeeWithSpace,
          [],
          {
            #space: space,
            #spaceUser: spaceUser,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setEmployee({required _i4.Employee? member}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setEmployee,
          [],
          {#member: member},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setSpace({required _i16.Space? space}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSpace,
          [],
          {#space: space},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateSpace(_i16.Space? space) => (super.noSuchMethod(
        Invocation.method(
          #updateSpace,
          [space],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> removeEmployeeWithSpace() => (super.noSuchMethod(
        Invocation.method(
          #removeEmployeeWithSpace,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addListener(_i17.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i17.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CreateFormBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateFormBloc extends _i1.Mock implements _i18.CreateFormBloc {
  MockCreateFormBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CreateFormState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCreateFormState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.CreateFormState);

  @override
  _i8.Stream<_i5.CreateFormState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i5.CreateFormState>.empty(),
      ) as _i8.Stream<_i5.CreateFormState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void add(_i19.CreateFormEvents? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i19.CreateFormEvents? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.CreateFormState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i19.CreateFormEvents>(
    _i20.EventHandler<E, _i5.CreateFormState>? handler, {
    _i20.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i20.Transition<_i19.CreateFormEvents, _i5.CreateFormState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i20.Change<_i5.CreateFormState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
